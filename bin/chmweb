#!/usr/bin/perl
# App::ChmWeb - Generate browsable web pages from CHM files
# Copyright (C) 2022-2023 Daniel Collins <solemnwarning@solemnwarning.net>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict;
use warnings;

use Encode qw(encode);
use File::Basename;
use IO::Compress::Gzip qw(gzip $GzipError);

use FindBin;
use lib ("$FindBin::Bin/../lib/");

use App::ChmWeb::AKLinkTable;
use App::ChmWeb::ContentPageWriter;
use App::ChmWeb::HHCParser;
use App::ChmWeb::LinkPageWriter;
use App::ChmWeb::TreeScanner;
use App::ChmWeb::Util;
use App::ChmWeb::WorkerPool;

my $gzip_pages = 0;

main() unless caller;

sub main
{
	for(my $i = 0; $i < (scalar @ARGV);)
	{
		if($ARGV[$i] eq "--gzip-pages")
		{
			splice(@ARGV, $i, 1);
			$gzip_pages = 1;
		}
		elsif($ARGV[$i] eq "--")
		{
			splice(@ARGV, $i, 1);
			last;
		}
		else{
			++$i;
		}
	}
	
	my $command = shift(@ARGV) // "";
	
	if($command eq "single-chm" && (scalar @ARGV) == 2)
	{
		my ($chm_file, $output_dir) = @ARGV;
		
		$output_dir .= "/" if($output_dir !~ m/\/$/);
		
		singlechm($chm_file, $output_dir);
	}
	elsif($command eq "multi-chm" && (scalar @ARGV) >= 2)
	{
		my $output_dir = pop(@ARGV);
		my @chm_files = @ARGV;
		
		$output_dir .= "/" if($output_dir !~ m/\/$/);
		
		multichm(\@chm_files, $output_dir);
	}
	elsif($command eq "chw" && (scalar @ARGV) >= 2)
	{
		my ($chw_file, $output_dir) = @ARGV;
		
		$output_dir .= "/" if($output_dir !~ m/\/$/);
		
		chw($chw_file, $output_dir);
	}
	else{
		die "Usage: $0 [--gzip-pages] single-chm <input.chm> <output directory>\n"
		   ."       $0 [--gzip-pages] multi-chm <input1.chm> <input2.chm> ... <output directory>\n";
	}
}

sub singlechm
{
	my ($chm_file, $output_dir) = @_;
	
	system("mkdir", "-p", $output_dir) and die;
	system("7z", "x", $chm_file, "-o${output_dir}", "-aoa") and die;
	
	my @chm_subdir_pairs = (
		[ basename($chm_file), "", $chm_file ],
	);
	
	STDERR->autoflush(1);
	
	my $verbosity = 1;
	my $data = App::ChmWeb::TreeScanner->scan_tree($output_dir, \@chm_subdir_pairs, $verbosity);
	
	print STDERR "Resolving links...\n";
	
	my %link_map = map { $_ => App::ChmWeb::Util::resolve_mixed_case_path($_, $output_dir) }
		(@{ $data->{page_links} }, @{ $data->{asset_links} });
	
	generate_toc_pages($data, $output_dir, \%link_map);
	
	generate_pages($data->{toc}, $output_dir, \@chm_subdir_pairs, $data, \%link_map);
}

sub multichm
{
	my ($chm_files, $output_dir) = @_;
	
	my @merged_toc = ();
	my @chm_subdir_pairs = ();
	
	foreach my $chm_file(@$chm_files)
	{
		my $chm_basename = basename($chm_file);
		my $chm_basename_noext = ($chm_basename =~ s/\.chm$//ir);
		
		if(grep { $_[1] =~ m/^\Q$chm_basename_noext\E\/$/i } @chm_subdir_pairs)
		{
			die "Multiple input files with same name ($chm_basename) on command line\n";
		}
		
		push(@chm_subdir_pairs, [ $chm_basename, "$chm_basename_noext/", $chm_file ]);
		
		my $chm_target_dir = "$output_dir/$chm_basename_noext";
		
		system("mkdir", "-p", $chm_target_dir) and die;
		system("7z", "x", $chm_file, "-o${chm_target_dir}", "-aoa") and die;
	}
	
	STDERR->autoflush(1);
	
	my $verbosity = 1;
	my $data = App::ChmWeb::TreeScanner->scan_tree($output_dir, \@chm_subdir_pairs, $verbosity);
	
	print STDERR "Resolving links...\n";
	
	my %link_map = map { $_ => App::ChmWeb::Util::resolve_mixed_case_path($_, $output_dir) }
		(@{ $data->{page_links} }, @{ $data->{asset_links} });
	
	generate_pages($data->{toc}, $output_dir, \@chm_subdir_pairs, $data, \%link_map);
}

sub chw
{
	my ($chw_file, $output_dir) = @_;
	
	my $chw = App::ChmWeb::AKLinkTable->load_chw($chw_file);
	
	my @merged_toc = ();
	my @chm_subdir_pairs = ();
	
	print STDERR "Extracting CHM files...";
	
	my @chx_names = $chw->get_chx_names();
	my $extract_done = 0;
	
	my $extract_pool = App::ChmWeb::WorkerPool->new(sub
	{
		my ($chm_file, $chm_target_dir) = @_;
		
		system("mkdir", "-p", $chm_target_dir) and die;
		system("7z", "x", $chm_file, "-o${chm_target_dir}", "-aoa", "-bd", "-bso0", "-bsp0") and die;
	});
	
	foreach my $chx_name(@chx_names)
	{
		my $chw_dir = dirname($chw_file);
		
		my $chm_file = $chw_dir."/".App::ChmWeb::Util::resolve_mixed_case_path("${chx_name}.chm", $chw_dir);
		unless(defined $chm_file)
		{
			die "Couldn't find ${chx_name}.chm (defined in $chw_file)";
		}
		
		my $chm_basename = basename($chm_file);
		
		push(@chm_subdir_pairs, [ $chm_basename, "${chx_name}/" ]);
		
		my $chm_target_dir = "$output_dir/${chx_name}";
		
		$extract_pool->post([ $chm_file, $chm_target_dir ], sub
		{
			++$extract_done;
			print STDERR "\rExtracting CHM files... ($extract_done / ", (scalar @chx_names), ")";
		});
	}
	
	$extract_pool->drain();
	$extract_pool = undef;
	
	print STDERR "\n";
	
	STDERR->autoflush(1);
	
	my $verbosity = 1;
	my $data = App::ChmWeb::TreeScanner->scan_tree($output_dir, \@chm_subdir_pairs, $chw, $verbosity);
	
	print STDERR "Resolving links...\n";
	
	my %link_map = map { $_ => App::ChmWeb::Util::resolve_mixed_case_path($_, $output_dir) }
		(@{ $data->{page_links} }, @{ $data->{asset_links} });
	
	print STDERR "Writing multi-choice ALink pages...\n";
	
	my $alinks = $chw->get_all_alinks();
	my $alinks_with_multiple_topics = { map { $_ => $alinks->{$_} }
		grep { (scalar @{ $alinks->{$_} }) > 1 }
		keys(%$alinks) };
	
	my $alink_page_map = App::ChmWeb::LinkPageWriter::write_link_pages($output_dir, $alinks_with_multiple_topics);
	$data->{alink_page_map} = $alink_page_map;
	
	generate_toc_pages($data, $output_dir, \%link_map);
	
	generate_pages($data->{toc}, $output_dir, \@chm_subdir_pairs, $data, \%link_map);
}

sub generate_pages
{
	my ($toc_root, $output_dir, $chm_subdir_pairs, $tree_data, $link_map) = @_;
	
	print STDERR "Generating pages...";
	
	my $page_generator = App::ChmWeb::WorkerPool->new(sub
	{
		my ($page_path) = @_;
		
		my $page_data = $tree_data->get_page_data($page_path)
			// die "Missing page data for $page_path";
		
		my $toc_path = [ $page_data->toc_path() ];
		
		my $content_path = ($page_path =~ s/\.(\w+)$/.content.$1/r);
		
		my @toc_page_path = $page_data->toc_path();
		pop(@toc_page_path) unless($tree_data->get_toc_nodes_at($toc_path));
		
		my $toc_page_url = App::ChmWeb::Util::root_relative_path_to_doc_relative_path("_toc/toc".join("_", @toc_page_path).".html", $page_path)."#toc".join("_", @$toc_path);
		
		my ($chm_root) = grep { $page_path =~ m/^\Q$_\E/ } map { $_->[1] } @$chm_subdir_pairs;
		
		write_content_page($page_path, $content_path, $output_dir, $link_map, $chm_root, $tree_data, $page_data);
		
		write_wrapper_page($toc_root, $toc_path, ($page_data->title() // ""), $output_dir, $page_path, $content_path, $link_map, $toc_page_url);
		
		return;
	});
	
	my @page_paths = $tree_data->get_page_paths();
	
	my $pages_generated = 0;
	my $pages_total = (scalar @page_paths);
	
	foreach my $page_path(@page_paths)
	{
		$page_generator->post([ $page_path ], sub
		{
			++$pages_generated;
			
			if(($pages_generated % 100) == 0 || $pages_generated == $pages_total)
			{
				print STDERR "\rGenerating pages... ($pages_generated / $pages_total)";
			}
		});
	}
	
	$page_generator->drain();
	$page_generator = undef;
	
	print STDERR "\n";
}

sub write_content_page
{
	my ($orig_path, $content_path, $output_dir, $link_map, $chm_root, $tree_data, $page_data) = @_;
	
	eval {
		my $pf = App::ChmWeb::ContentPageWriter->new($link_map, $chm_root, $tree_data, $page_data);
		$pf->load_content($orig_path, $output_dir);
		
		$pf->modify_content();
		
		if($gzip_pages)
		{
			my $content = $pf->get_content();
			
			gzip(\$content, "${output_dir}${content_path}.gz")
				or die "Unable to write ${output_dir}${content_path}.gz: $GzipError";
			
			unlink("${output_dir}${orig_path}")
				or warn "Unable to delete ${output_dir}${orig_path}: $!";
		}
		else{
			$pf->write_content("${output_dir}${content_path}");
		}
	};
	
	if($@)
	{
		warn "write_content_page: $@\n";
	}
}

sub write_wrapper_page
{
	my ($toc_root, $toc_path, $page_title, $output_dir, $wrapper_path, $content_path, $link_map, $toc_page_url) = @_;
	
	my $content = <<EOF;
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>$page_title</title>
</head>

<body>
<iframe src="$toc_page_url" style="position: fixed; top: 0px; left: 0px; height: 100%; width: 200px;"></iframe>
EOF
	
	if(defined $content_path)
	{
		my $local_content_path = App::ChmWeb::Util::root_relative_path_to_doc_relative_path($content_path, $wrapper_path);
		$content .= <<EOF;
<iframe src="$local_content_path" style="position: fixed; top: 0px; width: calc(100% - 200px); left: 200px; height:100%;"></iframe>
EOF
	}
	
	$content .= <<EOF;
</body>
</html>
EOF
	
	if($gzip_pages)
	{
		my $data = encode("UTF-8", $content);
		
		gzip(\$data, "${output_dir}${wrapper_path}.gz")
			or warn "write_wrapper_page: Unable to write ${output_dir}${wrapper_path}.gz: $GzipError\n";
	}
	else{
		if(open(my $fh, "> :encoding(UTF-8)", "${output_dir}${wrapper_path}"))
		{
			print {$fh} $content;
		}
		else{
			warn "write_wrapper_page: Unable to write ${output_dir}${wrapper_path}: $!\n";
		}
	}
}

sub generate_toc_pages
{
	my ($tree_data, $output_dir, $link_map) = @_;
	
	unless(-e "${output_dir}/_toc/")
	{
		mkdir("${output_dir}/_toc/") or die "Unable to create ${output_dir}/_toc/: $!\n";
	}
	
	my $total_toc_pages = 1;
	my $done_toc_pages = 0;
	
	my $toc_page_generator = App::ChmWeb::WorkerPool->new(sub
	{
		my ($toc_path) = @_;
		
		my $html_path = "_toc/toc".join("_", @$toc_path).".html";
		write_toc_page($tree_data, $toc_path, $output_dir, $html_path, $link_map);
		
		return;
	});
	
	my $toc_page_generator_callback = sub
	{
		++$done_toc_pages;
		
		if(($done_toc_pages % 100) == 0 || $done_toc_pages == $total_toc_pages)
		{
			print STDERR "\rGenerating TOC pages... ($done_toc_pages / $total_toc_pages)";
		}
	};
	
	$tree_data->visit_toc_nodes(sub
	{
		my ($toc_node, $toc_path) = @_;
		
		if(defined($toc_node->{children}) && @{ $toc_node->{children} })
		{
			++$total_toc_pages;
			$toc_page_generator->post([ $toc_path ], $toc_page_generator_callback);
		}
	});
	
	$toc_page_generator->post([ [] ], $toc_page_generator_callback);
	
	$toc_page_generator->drain();
	$toc_page_generator = undef;
	
	print "\n";
}

sub write_toc_page
{
	my ($tree_data, $toc_path, $output_dir, $html_path, $link_map) = @_;
	
	my $build_toc_list = sub
	{
		my ($build_toc_list, $toc_nodes, $toc_at, $toc_next, @toc_nextnext) = @_;
		
		my $r = "<ul style=\"padding-left:1em;\">\n";
		
		for(my $i = 0; $i < @$toc_nodes; ++$i)
		{
			my $node = $toc_nodes->[$i];
			
			my $anchor = "toc".join("_", @$toc_at, $i);
			
			my $aa = "";
			my $ab = "";
			
			if(defined($node->{page_path}))
			{
				if(defined($link_map->{ $node->{page_path} }))
				{
					my $href = App::ChmWeb::Util::root_relative_path_to_doc_relative_path($link_map->{ $node->{page_path} }, $html_path);
					$aa = "<a id=\"$anchor\" href=\"$href\" target=\"_top\">";
					$ab = "</a>";
				}
				else{
					# die "Broken link in TOC: ".$node->{page_path};
				}
			}
			
			my $expand_link = "";
			my $child_list = "";
			
			if(defined($node->{children}))
			{
				# Node has children...
				
				if(defined($toc_next) && $i == $toc_next)
				{
					# ... and the current page is at/under it
					$child_list = $build_toc_list->($build_toc_list, $node->{children}, [ @$toc_at, $toc_next ], @toc_nextnext);
					$expand_link = "[-] ";
				}
				else{
					$expand_link = "<a href=\"toc".join("_", @$toc_at, $i).".html#toc".join("_", @$toc_at, $i)."\">[+]</a> ";
				}
			}
			
			$r .= "<li>${expand_link}${aa}".($toc_nodes->[$i]->{name} // "???")."${ab}${child_list}</li>\n";
		}
		
		$r .= "</ul>\n";
	};
	
	my $root_list = $build_toc_list->($build_toc_list, $tree_data->{toc}, [], @$toc_path);
	
	my $html = <<EOF;
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<style type="text/css">
a:target
{
	font-weight: bold;
}
</style>
</head>

<body>
$root_list
</body>
</html>
EOF
	
	if($gzip_pages)
	{
		my $data = encode("UTF-8", $html);
		
		gzip(\$data, "${output_dir}/${html_path}.gz")
			or warn "write_toc_page: Unable to write ${output_dir}/${html_path}.gz: $GzipError\n";
	}
	else{
		if(open(my $fh, "> :encoding(UTF-8)", "${output_dir}/${html_path}"))
		{
			print {$fh} $html;
		}
		else{
			warn "write_toc_page: Unable to write ${output_dir}/${html_path}: $!\n";
		}
	}
}
