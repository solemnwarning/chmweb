#!/usr/bin/perl
# App::ChmWeb - Generate browsable web pages from CHM files
# Copyright (C) 2022 Daniel Collins <solemnwarning@solemnwarning.net>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict;
use warnings;

use File::Basename;

use FindBin;
use lib ("$FindBin::Bin/../lib/");

use App::ChmWeb::HHCParser;
use App::ChmWeb::PageFixer;
use App::ChmWeb::Util;
use App::ChmWeb::WorkerPool;

main() unless caller;

sub main
{
	if((scalar @ARGV) != 2)
	{
		die "Usage: $0 <input.chm> <output directory>\n";
	}
	
	my ($chm_in, $dir_out) = @ARGV;
	
	system("mkdir", "-p", $dir_out) and die;
	system("7z", "x", $chm_in, "-o${dir_out}", "-aoa") and die;
	
	my $hhc_name = App::ChmWeb::Util::find_hhc_in($dir_out);
	
	chdir($dir_out) or die $!;
	
	my $hhc = App::ChmWeb::HHCParser::parse_hhc_file($hhc_name);
	
	{
		my $pool = App::ChmWeb::WorkerPool->new(\&process_hhc_level_do_work);
		
		process_hhc_level($hhc->{toc}, $hhc->{toc}, [], basename($chm_in), $pool);
		
		# Wait for outstanding tasks
		$pool->drain();
	}
}

sub process_hhc_level
{
	my ($root, $nodes, $toc_path, $chm_basename, $pool) = @_;
	
	my $indent_s = " " x ((scalar @$toc_path) * 4);
	
	for(my $i = 0; $i < (scalar @$nodes); ++$i)
	{
		my $node = $nodes->[$i];
		
		print $chm_basename, ": ", $indent_s, $node->{Name}, (defined($node->{Local}) ? " (".$node->{Local}.")" : ""), "...\n";
		
		if(defined $node->{Local})
		{
			my $orig_path    = App::ChmWeb::Util::resolve_mixed_case_path($node->{Local}, "");
			my $content_path = ($node->{Local} =~ s/\.(\w+)$/.content.$1/r);
			
			$pool->post([ $orig_path, $content_path, $root, $node, [ @$toc_path, $i ] ], sub {});
		}
		
		process_hhc_level($root, $node->{children}, [ @$toc_path, $i ], $chm_basename, $pool) if defined $node->{children};
	}
}

sub process_hhc_level_do_work
{
	my ($orig_path, $content_path, $root, $node, $toc_path) = @_;
	
	write_content_page($orig_path, $content_path);
	
	write_wrapper_page($root, $node, $toc_path, $orig_path, $content_path);
}

sub write_content_page
{
	my ($orig_path, $content_path) = @_;
	
	my $pf = App::ChmWeb::PageFixer->new();
	$pf->load_content($orig_path);
	
	$pf->fix_image_paths();
	$pf->fix_absolute_links();
	$pf->set_default_link_target("_parent");
	
	$pf->write_content($content_path);
}

sub write_wrapper_page
{
	my ($root, $node, $toc_path, $orig_path, $content_path) = @_;
	
	my $toc = build_wrapper_toc($root, $toc_path, $content_path);
	
	my $content_name = basename($content_path);
	
	open(my $fh, ">", $orig_path) or die "$orig_path: $!";
	print {$fh} <<EOF;
<html>
<head>
<title>$node->{Name}</title>
</head>

<body>
<div style="position: fixed; top: 0px; left: 0px; height: 100%; width: 200px; overflow: scroll;">
$toc
</div>
<iframe src="$content_name" style="position: fixed; top: 0px; width: calc(100% - 200px); left: 200px; height:100%;"></iframe>
</body>
</html>
EOF
}

sub build_wrapper_toc
{
	my ($nodes, $toc_path, $content_path) = @_;
	
	my ($toc_this, @toc_next) = @$toc_path;
	
	my $r = "<ul style=\"padding-left:1em;\">\n";
	
	for(my $i = 0; $i < @$nodes; ++$i)
	{
		my $node = $nodes->[$i];
		
		my $aa = "";
		my $ab = "";
		
		if(defined $node->{Local})
		{
			my $href = App::ChmWeb::Util::resolve_link("", $content_path, "/".$node->{Local});
			$aa = "<a href=\"$href\">";
			$ab = "</a>";
		}
		
		my $ba = "";
		my $bb = "";
		
		if(defined($toc_this) && $i == $toc_this)
		{
			$ba = "<b>";
			$bb = "</b>";
		}
		
		$r .= "<li>${ba}${aa}".$nodes->[$i]->{Name}."${ab}${bb}</b>\n";
		
		if(
			# Node has children...
			defined($node->{children})
				# ...the current page is at/under it...
				&& ((defined($toc_this) && $i == $toc_this)
				# ...or it doesn't have a link (wouldn't be expandable by itself)
				|| !defined($node->{Local})))
		{
			$r .= build_wrapper_toc($node->{children}, \@toc_next, $content_path);
		}
		
		$r .= "</li>\n";
	}
	
	$r .= "</ul>\n";
	
	return $r;
}
