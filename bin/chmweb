#!/usr/bin/perl
# App::ChmWeb - Generate browsable web pages from CHM files
# Copyright (C) 2022-2023 Daniel Collins <solemnwarning@solemnwarning.net>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict;
use warnings;

use Encode qw(encode);
use Fcntl qw(:mode);
use File::Basename;
use File::stat;
use IO::Compress::Gzip qw(gzip $GzipError);
use List::Util qw(all);

use App::ChmWeb::AKLinkTable;
use App::ChmWeb::ContentPageWriter;
use App::ChmWeb::HHCParser;
use App::ChmWeb::LinkPageWriter;
use App::ChmWeb::ToC;
use App::ChmWeb::TreeScanner;
use App::ChmWeb::Util;
use App::ChmWeb::WorkerPool;

my $gzip_pages = 0;

main() unless caller;

sub main
{
	STDERR->autoflush(1);
	
	for(my $i = 0; $i < (scalar @ARGV);)
	{
		if($ARGV[$i] eq "--gzip-pages")
		{
			splice(@ARGV, $i, 1);
			$gzip_pages = 1;
		}
		elsif($ARGV[$i] eq "--")
		{
			splice(@ARGV, $i, 1);
			last;
		}
		else{
			++$i;
		}
	}
	
	if((scalar @ARGV) == 2 && $ARGV[0] =~ m/\.chm$/i)
	{
		my ($chm_file, $output_dir) = @ARGV;
		
		$output_dir .= "/" if($output_dir !~ m/\/$/);
		
		singlechm($chm_file, $output_dir);
	}
	elsif((scalar @ARGV) >= 2 && all { m/\.chm$/i } @ARGV[0 .. ($#ARGV - 1)])
	{
		my $output_dir = pop(@ARGV);
		my @chm_files = @ARGV;
		
		$output_dir .= "/" if($output_dir !~ m/\/$/);
		
		multichm(\@chm_files, $output_dir);
	}
	elsif((scalar @ARGV) == 2 && $ARGV[0] =~ m/\.chw$/i)
	{
		my ($chw_file, $output_dir) = @ARGV;
		
		$output_dir .= "/" if($output_dir !~ m/\/$/);
		
		chw($chw_file, $output_dir);
	}
	else{
		die "Usage: $0 [--gzip-pages] <input.chm> [<input2.chm> <input3.chm> ...] <output directory>\n"
		   ."       $0 [--gzip-pages] <input.chw> <output directory>\n";
	}
}

sub singlechm
{
	my ($chm_file, $output_dir) = @_;
	
	my $chm_dirname = dirname($chm_file) // ".";
	my $chm_basename = basename($chm_file);
	
	my $chm_stem = ($chm_basename =~ s/\.chm$//ir);
	
	my $chi_filename = App::ChmWeb::Util::resolve_mixed_case_path("${chm_stem}.chi", $chm_dirname);
	my $chi;
	
	if(defined $chi_filename)
	{
		print STDERR "Loading ${chi_filename}...\n";
		
		$chi_filename = "${chm_dirname}/${chi_filename}";
		$chi = App::ChmWeb::AKLinkTable->load_chi($chi_filename);
	}
	else{
		$chi = App::ChmWeb::AKLinkTable->stub_chi();
	}
	
	system("mkdir", "-p", $output_dir) and die;
	
	print STDERR "Extracting ${chm_basename}...\n";
	
	system("7z", "x", $chm_file, "-o${output_dir}", "-aoa", "-bd", "-bso0", "-bsp0") and die;
	
	my $toc = App::ChmWeb::ToC->new();
	$toc->add_chm($chm_stem, "");
	
	my $verbosity = 1;
	my $data = App::ChmWeb::TreeScanner->scan_tree($output_dir, $toc, $chi, $verbosity);
	
	print STDERR "Resolving links...\n";
	
	my %link_map = map { $_ => App::ChmWeb::Util::resolve_mixed_case_path($_, $output_dir) }
		(@{ $data->{page_links} }, @{ $data->{asset_links} });
	
	print STDERR "Writing multi-choice ALink pages...\n";
	$data->{alink_page_map} = generate_alink_pages($output_dir, $data);
	
	print STDERR "Writing multi-choice KLink pages...\n";
	$data->{klink_page_map} = generate_klink_pages($output_dir, $data);
	
	generate_toc_pages($toc, $output_dir, \%link_map);
	
	generate_pages($output_dir, $toc, $data, \%link_map);
	write_index_page($toc, $data, $output_dir);
	
	fix_permissions($output_dir);
}

sub multichm
{
	my ($chm_files, $output_dir) = @_;
	
	my $toc = App::ChmWeb::ToC->new();
	my @chi_links = ();
	
	my $chi_loader = App::ChmWeb::WorkerPool->new(sub
	{
		my ($chi_filename) = @_;
		return App::ChmWeb::AKLinkTable->load_chi($chi_filename);
	});
	
	print STDERR "Loading CHI files...\n";
	
	foreach my $chm_file(@$chm_files)
	{
		my $chm_dirname = dirname($chm_file) // ".";
		my $chm_basename = basename($chm_file);
		
		my $chm_stem = ($chm_basename =~ s/\.chm$//ir);
		
		if(defined $toc->chm_subdir_by_stem($chm_stem))
		{
			die "Multiple input files with same name ($chm_basename) on command line\n";
		}
		
		$toc->add_chm($chm_stem, "${chm_stem}/");
		
		my $chi_filename = App::ChmWeb::Util::resolve_mixed_case_path("${chm_stem}.chi", $chm_dirname);
		
		if(defined $chi_filename)
		{
			$chi_filename = "${chm_dirname}/${chi_filename}";
			
			$chi_loader->post([ $chi_filename ], sub
			{
				my ($chi) = @_;
				push(@chi_links, App::ChmWeb::AKLinkTable->load_chi($chi_filename));
			});
		}
	}
	
	$chi_loader->drain();
	$chi_loader = undef;
	
	my $merged_chi = App::ChmWeb::AKLinkTable->merge(@chi_links);
	
	print STDERR "Extracting CHM files...";
	
	my $extract_done = 0;
	my $extract_pool = App::ChmWeb::WorkerPool->new(sub
	{
		my ($chm_file, $chm_target_dir) = @_;
		
		system("mkdir", "-p", $chm_target_dir) and die;
		system("7z", "x", $chm_file, "-o${chm_target_dir}", "-aoa", "-bd", "-bso0", "-bsp0") and die;
	});
	
	foreach my $chm_file(@$chm_files)
	{
		my $chm_basename   = basename($chm_file);
		my $chm_target_dir = "$output_dir/".$toc->chm_subdir_by_chX($chm_basename);
		
		$extract_pool->post([ $chm_file, $chm_target_dir ], sub
		{
			++$extract_done;
			print STDERR "\rExtracting CHM files... ($extract_done / ", (scalar @$chm_files), ")";
		});
	}
	
	$extract_pool->drain();
	$extract_pool = undef;
	
	print STDERR "\n";
	
	my $verbosity = 1;
	my $data = App::ChmWeb::TreeScanner->scan_tree($output_dir, $toc, $merged_chi, $verbosity);
	
	print STDERR "Resolving links...\n";
	
	my %link_map = map { $_ => App::ChmWeb::Util::resolve_mixed_case_path($_, $output_dir) }
		(@{ $data->{page_links} }, @{ $data->{asset_links} });
	
	print STDERR "Writing multi-choice ALink pages...\n";
	$data->{alink_page_map} = generate_alink_pages($output_dir, $data);
	
	print STDERR "Writing multi-choice KLink pages...\n";
	$data->{klink_page_map} = generate_klink_pages($output_dir, $data);
	
	generate_toc_pages($toc, $output_dir, \%link_map);
	
	generate_pages($output_dir, $toc, $data, \%link_map);
	write_index_page($toc, $data, $output_dir);
	
	fix_permissions($output_dir);
}

sub chw
{
	my ($chw_file, $output_dir) = @_;
	
	my $chw_dirname = dirname($chw_file);
	my $chw_basename = basename($chw_file);
	
	print STDERR "Loading CHW file...\n";
	
	my $chw = App::ChmWeb::AKLinkTable->load_chw($chw_file);
	
	print STDERR "Loading COL file...\n";
	
	my $col_name = ($chw_basename =~ s/(\.chw)?$/\.col/ir);
	my $col_file = App::ChmWeb::Util::resolve_mixed_case_path($col_name, $chw_dirname);
	
	die "Couldn't find $col_name in $chw_dirname\n"
		unless(defined $col_file);
	
	$col_file = "${chw_dirname}/${col_file}";
	
	my $toc = App::ChmWeb::ToC->load_col_file($col_file);
	
	print STDERR "Extracting CHM files...";
	
	my @chm_nodes = $toc->depth_first_search(sub { return $_[0]->isa("App::ChmWeb::ToC::Node::CHM"); });
	my $extract_done = 0;
	
	my $extract_pool = App::ChmWeb::WorkerPool->new(sub
	{
		my ($chm_file, $chm_target_dir) = @_;
		
		system("mkdir", "-p", $chm_target_dir) and die;
		system("7z", "x", $chm_file, "-o${chm_target_dir}", "-aoa", "-bd", "-bso0", "-bsp0") and die;
	});
	
	foreach my $chm_node(@chm_nodes)
	{
		my $chx_name = $chm_node->chm_stem();
		
		my $chm_file = App::ChmWeb::Util::resolve_mixed_case_path("${chx_name}.chm", $chw_dirname);
		unless(defined $chm_file)
		{
			die "Couldn't find ${chx_name}.chm (defined in $col_file)";
		}
		
		$chm_file = "${chw_dirname}/${chm_file}";
		
		my $chm_target_dir = "$output_dir/".$toc->chm_subdir_by_stem($chx_name);
		
		$extract_pool->post([ $chm_file, $chm_target_dir ], sub
		{
			++$extract_done;
			print STDERR "\rExtracting CHM files... ($extract_done / ", (scalar @chm_nodes), ")";
		});
	}
	
	$extract_pool->drain();
	$extract_pool = undef;
	
	print STDERR "\n";
	
	my $verbosity = 1;
	my $data = App::ChmWeb::TreeScanner->scan_tree($output_dir, $toc, $chw, $verbosity);
	
	print STDERR "Resolving links...\n";
	
	my %link_map = map { $_ => App::ChmWeb::Util::resolve_mixed_case_path($_, $output_dir) }
		(@{ $data->{page_links} }, @{ $data->{asset_links} });
	
	print STDERR "Writing multi-choice ALink pages...\n";
	$data->{alink_page_map} = generate_alink_pages($output_dir, $data);
	
	print STDERR "Writing multi-choice KLink pages...\n";
	$data->{klink_page_map} = generate_klink_pages($output_dir, $data);
	
	generate_toc_pages($toc, $output_dir, \%link_map);
	
	generate_pages($output_dir, $toc, $data, \%link_map);
	write_index_page($toc, $data, $output_dir);
	
	fix_permissions($output_dir);
}

sub generate_alink_pages
{
	my ($output_dir, $tree_data) = @_;
	
	my @all_alink_refs = map { $_->alink_refs() } $tree_data->get_pages();
	
	mkdir("${output_dir}/_alinks");
	
	my $page_writer = App::ChmWeb::LinkPageWriter->new($output_dir, "_alinks/", $tree_data->{chi}->get_all_alinks());
	my %alink_page_map = ();
	
	foreach my $alink_ref(@all_alink_refs)
	{
		my (undef, $alink_names) = split(m/:/, $alink_ref, 2);
		my @alink_names = split(m/;/, $alink_names);
		
		my @topics = map { $tree_data->{chi}->get_alink_by_key($_) } @alink_names;
		
		if((scalar @topics) > 1)
		{
			$alink_page_map{$alink_names} = $page_writer->get_link_page(\@alink_names);
		}
	}
	
	return \%alink_page_map;
}

sub generate_klink_pages
{
	my ($output_dir, $tree_data) = @_;
	
	my @all_klink_refs = map { $_->klink_refs() } $tree_data->get_pages();
	
	mkdir("${output_dir}/_klinks");
	
	my $page_writer = App::ChmWeb::LinkPageWriter->new($output_dir, "_klinks/", $tree_data->{chi}->get_all_klinks());
	my %klink_page_map = ();
	
	foreach my $klink_ref(@all_klink_refs)
	{
		my (undef, $klink_names) = split(m/:/, $klink_ref, 2);
		my @klink_names = split(m/;/, $klink_names);
		
		my @topics = map { $tree_data->{chi}->get_klink_by_key($_) } @klink_names;
		
		if((scalar @topics) > 1)
		{
			$klink_page_map{$klink_names} = $page_writer->get_link_page(\@klink_names);
		}
	}
	
	return \%klink_page_map;
}

sub generate_pages
{
	my ($output_dir, $toc, $tree_data, $link_map) = @_;
	
	print STDERR "Generating pages...";
	
	my $page_generator = App::ChmWeb::WorkerPool->new(sub
	{
		my ($page_path) = @_;
		
		my $page_data = $tree_data->get_page_data($page_path)
			// die "Missing page data for $page_path";
		
		my $toc_path = [ $page_data->toc_path() ];
		
		my $content_path = ($page_path =~ s/\.(\w+)$/.content.$1/r);
		
		# If this page has children, then we should display the ToC under it, otherwise we
		# display the ToC of the our immediate parent.
		my @toc_page_path = $page_data->toc_path();
		pop(@toc_page_path) unless($toc->nodes_at(\@toc_page_path));
		
		my $toc_page_url = App::ChmWeb::Util::root_relative_path_to_doc_relative_path("_toc/toc".join("_", @toc_page_path).".html", $page_path)."#toc".join("_", @$toc_path);
		
		my $chm_root = $toc->chm_subdir_by_stem($toc->chm_stem_by_path($page_path));
		
		write_content_page($page_path, $content_path, $output_dir, $link_map, $chm_root, $tree_data, $page_data);
		
		my $local_content_path = App::ChmWeb::Util::root_relative_path_to_doc_relative_path($content_path, $page_path);
		write_wrapper_page(($page_data->title() // ""), $output_dir, $page_path, $local_content_path, $toc_page_url);
		
		return;
	});
	
	my @page_paths = $tree_data->get_page_paths();
	
	my $pages_generated = 0;
	my $pages_total = (scalar @page_paths);
	
	foreach my $page_path(@page_paths)
	{
		$page_generator->post([ $page_path ], sub
		{
			++$pages_generated;
			
			if(($pages_generated % 100) == 0 || $pages_generated == $pages_total)
			{
				print STDERR "\rGenerating pages... ($pages_generated / $pages_total)";
			}
		});
	}
	
	$page_generator->drain();
	$page_generator = undef;
	
	print STDERR "\n";
}

sub write_content_page
{
	my ($orig_path, $content_path, $output_dir, $link_map, $chm_root, $tree_data, $page_data) = @_;
	
	eval {
		my $pf = App::ChmWeb::ContentPageWriter->new($link_map, $chm_root, $tree_data, $page_data);
		$pf->load_content($orig_path, $output_dir);
		
		$pf->modify_content();
		
		if($gzip_pages)
		{
			my $content = $pf->get_content();
			
			gzip(\$content, "${output_dir}${content_path}.gz")
				or die "Unable to write ${output_dir}${content_path}.gz: $GzipError";
			
			unlink("${output_dir}${orig_path}")
				or warn "Unable to delete ${output_dir}${orig_path}: $!";
		}
		else{
			$pf->write_content("${output_dir}${content_path}");
		}
	};
	
	if($@)
	{
		warn "write_content_page: $@\n";
	}
}

sub write_wrapper_page
{
	my ($page_title, $output_dir, $wrapper_path, $content_path, $toc_page_url) = @_;
	
	my $content = <<EOF;
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>$page_title</title>
</head>

<body>
<iframe src="$toc_page_url" style="position: fixed; top: 0px; left: 0px; height: 100%; width: 20em;"></iframe>
<iframe src="$content_path" style="position: fixed; top: 0px; width: calc(100% - 20em); left: 20em; height:100%;"></iframe>
</body>
</html>
EOF
	
	if($gzip_pages)
	{
		my $data = encode("UTF-8", $content);
		
		gzip(\$data, "${output_dir}${wrapper_path}.gz")
			or warn "write_wrapper_page: Unable to write ${output_dir}${wrapper_path}.gz: $GzipError\n";
	}
	else{
		if(open(my $fh, "> :encoding(UTF-8)", "${output_dir}${wrapper_path}"))
		{
			print {$fh} $content;
		}
		else{
			warn "write_wrapper_page: Unable to write ${output_dir}${wrapper_path}: $!\n";
		}
	}
}

sub generate_toc_pages
{
	my ($toc, $output_dir, $link_map) = @_;
	
	unless(-e "${output_dir}/_toc/")
	{
		mkdir("${output_dir}/_toc/") or die "Unable to create ${output_dir}/_toc/: $!\n";
	}
	
	my $total_toc_pages = 1;
	my $done_toc_pages = 0;
	
	my $toc_page_generator = App::ChmWeb::WorkerPool->new(sub
	{
		my ($toc_path) = @_;
		
		my $html_path = "_toc/toc".join("_", @$toc_path).".html";
		write_toc_page($toc, $toc_path, $output_dir, $html_path, $link_map);
		
		return;
	});
	
	my $toc_page_generator_callback = sub
	{
		++$done_toc_pages;
		
		if(($done_toc_pages % 100) == 0 || $done_toc_pages == $total_toc_pages)
		{
			print STDERR "\rGenerating TOC pages... ($done_toc_pages / $total_toc_pages)";
		}
	};
	
	$toc->depth_first_search(sub
	{
		my ($toc_node) = @_;
		
		if($toc_node->isa("App::ChmWeb::ToC::Node::Container") && $toc_node->children())
		{
			++$total_toc_pages;
			$toc_page_generator->post([ [ $toc_node->path() ] ], $toc_page_generator_callback);
		}
		
		return;
	});
	
	$toc_page_generator->post([ [] ], $toc_page_generator_callback);
	
	$toc_page_generator->drain();
	$toc_page_generator = undef;
	
	print "\n";
}

sub write_toc_page
{
	my ($toc, $toc_path, $output_dir, $html_path, $link_map) = @_;
	
	my $build_toc_list = sub
	{
		my ($build_toc_list, $toc_nodes, $toc_at, $toc_next, @toc_nextnext) = @_;
		
		my $r = "<ul>\n";
		
		for(my $i = 0; $i < @$toc_nodes; ++$i)
		{
			my $node = $toc_nodes->[$i];
			
			my $anchor = "toc".join("_", @$toc_at, $i);
			
			my $expand_href = undef;
			my $expand_link = "";
			my $child_list = "";
			
			if($node->isa("App::ChmWeb::ToC::Node::Container") && $node->children())
			{
				# Node has children...
				
				if(defined($toc_next) && $i == $toc_next)
				{
					# ... and the current page is at/under it
					$child_list = $build_toc_list->($build_toc_list, [ $node->children() ], [ @$toc_at, $toc_next ], @toc_nextnext);
					$expand_link = "<span class=\"arrow\">&#x25BC;</span>";
				}
				else{
					$expand_href = "toc".join("_", @$toc_at, $i).".html#toc".join("_", @$toc_at, $i);
					$expand_link = "<a class=\"arrow\" href=\"${expand_href}\">&#x25B6;</a>";
				}
			}
			
			my $aa = "";
			my $ab = "";
			
			if($node->isa("App::ChmWeb::ToC::Node::Page"))
			{
				if(defined($link_map->{ $node->filename() }))
				{
					my $href = App::ChmWeb::Util::root_relative_path_to_doc_relative_path($link_map->{ $node->filename() }, $html_path);
					$aa = "<a id=\"$anchor\" href=\"$href\" target=\"_top\">";
					$ab = "</a>";
				}
				else{
					# die "Broken link in TOC: ".$node->{page_path};
				}
			}
			elsif(defined $expand_href)
			{
				$aa = "<a id=\"$anchor\" href=\"${expand_href}\">";
				$ab = "</a>";
			}
			
			$r .= "<li>${expand_link}${aa}".($node->title() // "???")."${ab}${child_list}</li>\n";
		}
		
		$r .= "</ul>\n";
	};
	
	my $root_list = $build_toc_list->($build_toc_list, [ $toc->root() ], [], @$toc_path);
	
	my $html = <<EOF;
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<style type="text/css">
li {
	list-style-type: none;
	font-family: "Verdana", "Helvetica", sans-serif;
}

ul {
	padding-left: 1em;
}

li .arrow {
	position: absolute;
	margin-left: -1em;
}

li > ul {
	border-top: 1px solid #000000;
}

li:not(:last-of-type) {
	border-bottom: 1px solid #000000;
}

a {
	text-decoration: none;
}

a:target {
	font-weight: bold;
}
</style>
</head>

<body>
$root_list
</body>
</html>
EOF
	
	if($gzip_pages)
	{
		my $data = encode("UTF-8", $html);
		
		gzip(\$data, "${output_dir}/${html_path}.gz")
			or warn "write_toc_page: Unable to write ${output_dir}/${html_path}.gz: $GzipError\n";
	}
	else{
		if(open(my $fh, "> :encoding(UTF-8)", "${output_dir}/${html_path}"))
		{
			print {$fh} $html;
		}
		else{
			warn "write_toc_page: Unable to write ${output_dir}/${html_path}: $!\n";
		}
	}
}

sub fix_permissions
{
	my ($dir) = @_;
	
	print STDERR "Resetting directory permissions under $dir...\n";
	
	my $umask = umask();
	
	my $walk = sub
	{
		my ($walk, $dir) = @_;
		
		if(opendir(my $dh, $dir))
		{
			while(defined(my $name = readdir($dh)))
			{
				next if($name eq "." || $name eq "..");
				$name = "${dir}/${name}";
				
				my $st = stat($name);
				if($st)
				{
					my $new_mode;
					
					if(S_ISDIR($st->mode))
					{
						$new_mode = 0777 & ~$umask;
						$walk->($walk, $name);
					}
					else{
						$new_mode = 0666 & ~$umask;
					}
					
					if(($st->mode & 07777) != $new_mode)
					{
						# printf("%s %o => %o\n", $name, ($st->mode & 07777), $new_mode);
						
						chmod($new_mode, $name)
							or warn "Unable to change permissions on $name: $!\n";
					}
				}
				else{
					warn "Unable to stat $dir/$name: $!\n";
				}
			}
		}
		else{
			warn "Unable to open $dir: $!\n";
		}
	};
	
	$walk->($walk, $dir);
}

sub write_index_page
{
	my ($toc, $tree_data, $output_dir) = @_;
	
	# Find the first page in the collection to serve as the entry page.
	my ($toc_page) = $toc->depth_first_search(sub
	{
		my ($toc_node) = @_;
		return $toc_node->isa("App::ChmWeb::ToC::Node::Page");
	});
	
	return unless(defined $toc_page);
	
	my $page_path = $toc_page->filename();
	my $page_data = $tree_data->get_page_data($page_path)
		// die "Missing page data for $page_path";
	
	my $content_path = ($page_path =~ s/\.(\w+)$/.content.$1/r);
	
	# If this page has children, then we should display the ToC under it, otherwise we
	# display the ToC of the our immediate parent.
	my @toc_page_path = $page_data->toc_path();
	pop(@toc_page_path) unless($toc->nodes_at(\@toc_page_path));
	
	my $toc_page_url = "_toc/toc".join("_", @toc_page_path).".html#toc".join("_", $toc_page->path());
	
	write_wrapper_page(($page_data->title() // ""), $output_dir, "index.html", $content_path, $toc_page_url);
}
